#!/usr/bin/env python

##############################################################################
##
# Copyright 2019 CELLS / ALBA Synchrotron, Bellaterra, Spain
##
# lnstacks is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
##
# lnstacks is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
##
##############################################################################


""""Script lnstacks is used to get the absorbance stacks, giving as input
the transmittance stacks: apply minus Napierian logarithm to stacks.
It can be applied to hdf5/mrc stacks situated on the same folder.
It can also be applied on individual hdf5/mrc stacks.
Mainly used for processing Tomography projection image stacks, but it is
a quite generic script."""


import os
import glob
import struct
import argparse
from argparse import RawTextHelpFormatter

import h5py
import numpy as np
from joblib import Parallel, delayed


class CustomFormatter(argparse.ArgumentDefaultsHelpFormatter,
                      argparse.RawDescriptionHelpFormatter):
    pass


def minus_ln_stack_h5(h5_stack_fn, tree="TomoNormalized",
                      dataset="TomoNormalized"):
    """Minus Napierian logarithm applied to a hdf5 stack of images"""

    if h5_stack_fn is None:
        raise ValueError("Input stack cannot be None")

    h5_handler = h5py.File(h5_stack_fn, "r")

    h5_outfile_fn = h5_stack_fn.rsplit('.', 1)[0] + '_ln.hdf5'
    h5_outfile = h5py.File(h5_outfile_fn, 'w')

    h5_group = h5_handler[tree]

    # Main Data
    input_data_stack = h5_group[dataset]

    # Shape information of data image stack
    infoshape = input_data_stack.shape
    n_frames = infoshape[0]
    n_rows = infoshape[1]
    n_cols = infoshape[2]

    grp_ln = h5_outfile.create_group(tree)
    copy_metadata(h5_group, grp_ln)

    grp_ln.create_dataset(dataset, shape=(n_frames, n_rows, n_cols),
                          chunks=(1, n_rows, n_cols), dtype='float32')
    grp_ln[dataset].attrs['Number of Frames'] = n_frames
    grp_ln[dataset].attrs['Number of Rows'] = n_rows
    grp_ln[dataset].attrs['Number of Columns'] = n_cols

    for n_img in range(n_frames):
        img = input_data_stack[n_img]
        grp_ln[dataset][n_img] = -np.log(img)

    h5_handler.close()
    h5_outfile.close()
    print("Minus logarithm applied on stack {}".format(h5_stack_fn))


def copy_metadata(h5_group, h5_grp_ln):
    """Copy metadata to ln stack"""

    # Retrieving Angles
    try:
        angles = h5_group["rotation_angle"].value
        h5_grp_ln.create_dataset("rotation_angle", data=angles)
    except:
        print("\nAngles could not be extracted.")

    # Retrieving Energies
    try:
        energies = h5_group["energy"].value
        h5_grp_ln.create_dataset("energy", data=energies)
    except:
        print("\nEnergies could not be extracted.")

    # Retrieving Pixel Size
    try:
        x_pixel_size = h5_group["x_pixel_size"].value
        y_pixel_size = h5_group["y_pixel_size"].value
        h5_grp_ln.create_dataset("x_pixel_size", data=x_pixel_size)
        h5_grp_ln.create_dataset("y_pixel_size", data=y_pixel_size)
    except Exception:
        print("\nPixel size could NOT be extracted.")


def minus_ln_stack_mrc(mrc_stack_fn, tree="TomoNormalized",
                       dataset="TomoNormalized"):
    """Read a little-endian .mrc file, apply the
    minus Napierian logarithm and save as hdf5 file"""

    # Note: If this function is giving problems, maybe it is because data had
    # to be unpacked using big-endian instead of little endian.

    # Note: created to unpack .mrc files containing floats32. It could be
    # extended if we want to deal with .mrc files containing other
    # data formats.

    # Info: MRC file format: http://bio3d.colorado.edu/imod/doc/mrc_format.txt
    # HEADER of MRC file is 1024 bytes.

    if mrc_stack_fn is None:
        raise ValueError("Input stack cannot be None")

    h5_outfile_fn = mrc_stack_fn.rsplit('.', 1)[0] + '_ln.hdf5'
    h5_outfile = h5py.File(h5_outfile_fn, 'w')
    grp_ln = h5_outfile.create_group(tree)

    # We try for little-endian data
    f = open(mrc_stack_fn, 'rb')
    if f < 0:
        print("mrc file could not be opened: " + mrc_stack_fn)
    # Get the first 10 values, which are integers:
    # nc nr ns mode ncstart nrstart nsstart nx ny nz
    # nc: number of columns
    # nr: number of rows
    # ns: number of slices
    # mode: format of image.
    fa = f.read(40)
    data_header = struct.unpack('<10I', fa)
    n_cols = data_header[0]
    n_rows = data_header[1]
    n_frames = data_header[2]

    grp_ln.create_dataset(dataset, shape=(n_frames, n_rows, n_cols),
                        chunks=(1, n_rows, n_cols), dtype='float32')
    grp_ln[dataset].attrs['Number of Frames'] = n_frames
    grp_ln[dataset].attrs['Number of Rows'] = n_rows
    grp_ln[dataset].attrs['Number of Columns'] = n_cols

    # rest_header = 1024 - 40 = 984
    # The rest of the header does not interest us.
    subtract_header_len = 1024 - 40
    f.read(subtract_header_len)

    single_img_size = n_cols * n_rows
    image_bytes_len = 4 * n_cols * n_rows

    for n_img in range(n_frames):
        pixels_bytes = f.read(image_bytes_len)
        format = '<' + str(single_img_size) + 'f'
        img = struct.unpack(format, pixels_bytes)
        img_ln = -np.log(img)
        img_ln = np.reshape(img_ln, (1, n_rows, n_cols))
        grp_ln[dataset][n_img] = img_ln

    f.close()
    h5_outfile.close()
    print("Minus logarithm applied on stack {}".format(mrc_stack_fn))


def minus_ln_stack(stack_fn, tree="TomoNormalized",
                   dataset="TomoNormalized"):
    """Apply the minus log a hdf5/mrc stack"""
    ext = stack_fn.rsplit('.', 1)[1]
    if ext == "hdf5" or ext == "h5":
        minus_ln_stack_h5(stack_fn, tree=tree, dataset=dataset)
    elif ext == "mrc":
        minus_ln_stack_mrc(stack_fn, tree=tree, dataset=dataset)


def minus_ln_stacks_dir(directory):
    """Apply the minus Napierian logarithm to many stacks situated
    in the same directory. Parallelization applied: many stacks
    processed in parallel"""

    fnames = glob.glob(directory + "/*")
    cores = -2
    Parallel(n_jobs=cores, backend="multiprocessing")(
        delayed(minus_ln_stack)(filename) for filename in fnames)


def main():
    parser = argparse.ArgumentParser(
        description="Compute absorbance stacks (given the "
                    "transmittance stacks) \n"
                    "Apply minus logarithm to: \n" +
                    "- A single stack \n" +
                    "- Many stacks situated in the same folder\n" +
                    "It accepts hdf5 stacks and mrc stacks",
        formatter_class=RawTextHelpFormatter)

    parser.add_argument("input", type=str, default=None,
                        help="Input one of those:\n"
                             "  - File hdf5 (or mrc) stack, \n"
                             "  - Directory containing hdf5 (or mrc) stacks")

    args = parser.parse_args()

    if os.path.isfile(args.input):
        print("Applying minus log to the given stack")
        minus_ln_stack(args.input)

    elif os.path.isdir(args.input):
        print("Applying minus log to the stacks in the given directory")
        minus_ln_stacks_dir(args.input)


if __name__ == "__main__":
    main()
